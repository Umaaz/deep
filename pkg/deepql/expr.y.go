// Code generated by goyacc -o pkg/deepql/expr.y.go pkg/deepql/expr.y. DO NOT EDIT.

//line pkg/deepql/expr.y:2
package deepql

import __yyfmt__ "fmt"

//line pkg/deepql/expr.y:2

import (
	"time"
)

//line pkg/deepql/expr.y:11
type yySymType struct {
	yys               int
	root              RootExpr
	groupOperation    GroupOperation
	coalesceOperation CoalesceOperation

	snapshotExpression         SnapshotExpression
	snapshotPipelineExpression SnapshotExpression
	wrappedSnapshotPipeline    Pipeline
	snapshotPipeline           Pipeline
	snapshotFilter             SnapshotFilter
	scalarFilter               ScalarFilter
	scalarFilterOperation      Operator

	scalarPipelineExpressionFilter ScalarFilter
	scalarPipelineExpression       ScalarExpression
	scalarExpression               ScalarExpression
	wrappedScalarPipeline          Pipeline
	scalarPipeline                 Pipeline
	aggregate                      Aggregate

	fieldExpression FieldExpression
	static          Static
	intrinsicField  Attribute
	attributeField  Attribute

	binOp          Operator
	staticInt      int
	staticStr      string
	staticFloat    float64
	staticDuration time.Duration
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const DURATION = 57350
const DOT = 57351
const OPEN_BRACE = 57352
const CLOSE_BRACE = 57353
const OPEN_PARENS = 57354
const CLOSE_PARENS = 57355
const NIL = 57356
const TRUE = 57357
const FALSE = 57358
const IDURATION = 57359
const NAME = 57360
const RESOURCE_DOT = 57361
const COUNT = 57362
const AVG = 57363
const MAX = 57364
const MIN = 57365
const SUM = 57366
const BY = 57367
const COALESCE = 57368
const END_ATTRIBUTE = 57369
const PIPE = 57370
const AND = 57371
const OR = 57372
const EQ = 57373
const NEQ = 57374
const LT = 57375
const LTE = 57376
const GT = 57377
const GTE = 57378
const NRE = 57379
const RE = 57380
const DESC = 57381
const TILDE = 57382
const ADD = 57383
const SUB = 57384
const NOT = 57385
const MUL = 57386
const DIV = 57387
const MOD = 57388
const POW = 57389

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"DURATION",
	"DOT",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_PARENS",
	"CLOSE_PARENS",
	"NIL",
	"TRUE",
	"FALSE",
	"IDURATION",
	"NAME",
	"RESOURCE_DOT",
	"COUNT",
	"AVG",
	"MAX",
	"MIN",
	"SUM",
	"BY",
	"COALESCE",
	"END_ATTRIBUTE",
	"PIPE",
	"AND",
	"OR",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"NRE",
	"RE",
	"DESC",
	"TILDE",
	"ADD",
	"SUB",
	"NOT",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 160,
	13, 48,
	-2, 56,
}

const yyPrivate = 57344

const yyLast = 627

var yyAct = [...]int{

	73, 17, 6, 7, 5, 16, 142, 12, 66, 17,
	158, 2, 53, 43, 104, 104, 46, 105, 30, 42,
	182, 109, 131, 132, 133, 142, 181, 44, 10, 30,
	105, 17, 187, 86, 87, 85, 63, 64, 65, 66,
	150, 97, 99, 100, 101, 102, 108, 69, 111, 61,
	62, 157, 63, 64, 65, 66, 50, 51, 52, 53,
	112, 17, 17, 17, 17, 17, 17, 17, 119, 121,
	122, 123, 124, 125, 126, 110, 113, 114, 115, 116,
	117, 118, 129, 130, 92, 131, 132, 133, 142, 15,
	17, 98, 84, 17, 155, 61, 62, 156, 63, 64,
	65, 66, 83, 155, 82, 81, 17, 80, 86, 87,
	85, 160, 67, 17, 60, 127, 149, 186, 145, 146,
	147, 17, 37, 162, 107, 47, 38, 40, 156, 151,
	152, 153, 154, 143, 144, 134, 135, 136, 137, 138,
	139, 141, 140, 148, 75, 129, 130, 74, 131, 132,
	133, 142, 48, 49, 45, 50, 51, 52, 53, 14,
	17, 4, 17, 11, 43, 9, 43, 46, 88, 46,
	48, 49, 162, 50, 51, 52, 53, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 175, 176,
	177, 178, 179, 185, 23, 24, 25, 29, 78, 1,
	68, 70, 0, 28, 26, 27, 76, 77, 79, 143,
	144, 134, 135, 136, 137, 138, 139, 141, 140, 184,
	0, 129, 130, 0, 131, 132, 133, 142, 0, 32,
	0, 71, 72, 33, 35, 143, 144, 134, 135, 136,
	137, 138, 139, 141, 140, 183, 0, 129, 130, 0,
	131, 132, 133, 142, 0, 0, 0, 0, 0, 0,
	0, 143, 144, 134, 135, 136, 137, 138, 139, 141,
	140, 180, 0, 129, 130, 0, 131, 132, 133, 142,
	0, 0, 0, 0, 0, 0, 0, 143, 144, 134,
	135, 136, 137, 138, 139, 141, 140, 163, 0, 129,
	130, 0, 131, 132, 133, 142, 0, 0, 0, 0,
	0, 0, 0, 143, 144, 134, 135, 136, 137, 138,
	139, 141, 140, 128, 0, 129, 130, 0, 131, 132,
	133, 142, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 143, 144, 134, 135, 136, 137, 138, 139, 141,
	140, 0, 0, 129, 130, 0, 131, 132, 133, 142,
	134, 135, 136, 137, 138, 139, 141, 140, 109, 0,
	129, 130, 0, 131, 132, 133, 142, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 54, 55, 56, 57,
	58, 59, 0, 0, 0, 0, 61, 62, 0, 63,
	64, 65, 66, 54, 55, 56, 57, 58, 59, 0,
	0, 0, 0, 61, 62, 0, 63, 64, 65, 66,
	54, 55, 56, 57, 58, 59, 0, 0, 0, 0,
	48, 49, 0, 50, 51, 52, 53, 23, 24, 25,
	29, 78, 106, 0, 70, 0, 28, 26, 27, 76,
	77, 79, 0, 0, 103, 36, 39, 0, 36, 39,
	0, 37, 0, 0, 37, 38, 40, 0, 38, 40,
	31, 34, 31, 34, 71, 72, 32, 0, 32, 0,
	33, 35, 33, 35, 23, 24, 25, 29, 0, 15,
	0, 89, 0, 28, 26, 27, 41, 3, 0, 18,
	21, 19, 20, 22, 13, 90, 23, 24, 25, 29,
	0, 15, 0, 161, 0, 28, 26, 27, 0, 0,
	0, 18, 21, 19, 20, 22, 13, 0, 91, 93,
	94, 95, 96, 23, 24, 25, 29, 0, 15, 0,
	159, 0, 28, 26, 27, 0, 0, 0, 18, 21,
	19, 20, 22, 13, 23, 24, 25, 29, 0, 15,
	0, 8, 0, 28, 26, 27, 0, 0, 0, 18,
	21, 19, 20, 22, 13, 23, 24, 25, 29, 0,
	15, 0, 89, 0, 28, 26, 27, 0, 0, 0,
	18, 21, 19, 20, 22, 23, 24, 25, 29, 0,
	0, 0, 120, 0, 28, 26, 27, 0, 0, 0,
	18, 21, 19, 20, 22, 23, 24, 25, 29, 0,
	0, 0, 112, 0, 28, 26, 27,
}
var yyPact = [...]int{

	549, -1000, -10, 443, -1000, 426, -1000, -1000, 549, -1000,
	389, -1000, 372, 100, -1000, 189, -1000, -1000, 95, 93,
	92, 90, 80, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	479, 72, 72, 72, 72, 72, 79, 79, 79, 79,
	79, 441, 2, 429, 111, 33, 355, 610, 48, 48,
	48, 48, 48, 48, -1000, -1000, -1000, -1000, -1000, -1000,
	590, 590, 590, 590, 590, 590, 590, 432, -1000, 312,
	432, 432, 432, -1000, -1000, -1000, -1000, -1000, 139, 112,
	27, 432, 432, 432, 432, 426, -1000, -1000, -1000, 570,
	39, 194, 528, -1000, -1000, 194, -1000, 87, 79, -1000,
	-1000, 87, -1000, -1000, -1000, 479, -1000, -1000, -1000, -1000,
	129, -1000, 501, 12, 12, -35, -35, -35, -35, 54,
	590, -8, -8, -39, -39, -39, -39, 284, -1000, 432,
	432, 432, 432, 432, 432, 432, 432, 432, 432, 432,
	432, 432, 432, 432, 432, 258, -22, -22, -1, -7,
	-1000, 232, 206, 180, 104, 429, 8, 19, 1, 528,
	-1000, 501, -11, -1000, -22, -22, -41, -41, -41, 41,
	41, 41, 41, 41, 41, 41, 41, -41, 329, 329,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 199, 3, 168, 4, 496, 165, 10, 163, 2,
	114, 161, 27, 7, 159, 154, 5, 47, 0, 147,
	144,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 5, 5, 5, 5, 5, 5,
	5, 6, 7, 7, 7, 7, 7, 7, 7, 2,
	3, 4, 4, 4, 4, 4, 4, 4, 8, 8,
	9, 10, 10, 10, 10, 10, 10, 11, 11, 12,
	12, 12, 12, 12, 12, 12, 12, 14, 15, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 16, 16,
	16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 18, 18, 18, 18, 18,
	18, 18, 19, 19, 20, 20,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 4,
	3, 3, 3, 3, 3, 3, 3, 1, 2, 3,
	3, 1, 1, 1, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 1, 1, 3, 4,
	4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 3,
}
var yyChk = [...]int{

	-1000, -1, -7, -5, -11, -4, -9, -2, 12, -6,
	-12, -8, -13, 25, -14, 10, -16, -18, 20, 22,
	23, 21, 24, 5, 6, 7, 15, 16, 14, 8,
	28, 29, 35, 39, 30, 40, 29, 35, 39, 30,
	40, -5, -7, -4, -12, -15, -13, -10, 41, 42,
	44, 45, 46, 47, 31, 32, 33, 34, 35, 36,
	-10, 41, 42, 44, 45, 46, 47, 12, 11, -17,
	12, 42, 43, -18, -19, -20, 17, 18, 9, 19,
	12, 12, 12, 12, 12, -4, -9, -2, -3, 12,
	26, -5, 12, -5, -5, -5, -5, -4, 12, -4,
	-4, -4, -4, 13, 13, 28, 13, 13, 13, 13,
	-12, -18, 12, -12, -12, -12, -12, -12, -12, -13,
	12, -13, -13, -13, -13, -13, -13, -17, 11, 41,
	42, 44, 45, 46, 31, 32, 33, 34, 35, 36,
	38, 37, 47, 29, 30, -17, -17, -17, 4, 4,
	13, -17, -17, -17, -17, -4, -13, 12, -7, 12,
	-16, 12, -7, 13, -17, -17, -17, -17, -17, -17,
	-17, -17, -17, -17, -17, -17, -17, -17, -17, -17,
	13, 27, 27, 13, 13, 13, 13, 13,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 12, 13, 14, 0, 10,
	0, 27, 0, 0, 46, 0, 56, 57, 0, 0,
	0, 0, 0, 85, 86, 87, 88, 89, 90, 91,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 12, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 31, 32, 33, 34, 35, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 28, 0,
	0, 0, 0, 82, 83, 84, 92, 93, 0, 0,
	0, 0, 0, 0, 0, 15, 16, 17, 18, 0,
	0, 5, 0, 6, 7, 8, 9, 22, 0, 23,
	24, 25, 26, 4, 11, 0, 21, 39, 47, 49,
	37, 38, 0, 40, 41, 42, 43, 44, 45, 30,
	0, 50, 51, 52, 53, 54, 55, 0, 29, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 80, 81, 0, 0,
	58, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	-2, 0, 0, 19, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	63, 94, 95, 59, 60, 61, 62, 20,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:93
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].snapshotPipeline)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:94
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].snapshotPipelineExpression)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:95
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].scalarPipelineExpressionFilter)
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:102
		{
			yyVAL.snapshotPipelineExpression = yyDollar[2].snapshotPipelineExpression
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:103
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotAnd, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:104
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotChild, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:105
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotDescendant, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:106
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotUnion, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:107
		{
			yyVAL.snapshotPipelineExpression = newSnapshotOperation(OpSnapshotSibling, yyDollar[1].snapshotPipelineExpression, yyDollar[3].snapshotPipelineExpression)
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:108
		{
			yyVAL.snapshotPipelineExpression = yyDollar[1].wrappedSnapshotPipeline
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:112
		{
			yyVAL.wrappedSnapshotPipeline = yyDollar[2].snapshotPipeline
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:115
		{
			yyVAL.snapshotPipeline = newPipeline(yyDollar[1].snapshotExpression)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:116
		{
			yyVAL.snapshotPipeline = newPipeline(yyDollar[1].scalarFilter)
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:117
		{
			yyVAL.snapshotPipeline = newPipeline(yyDollar[1].groupOperation)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:118
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].snapshotExpression)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:119
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].scalarFilter)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:120
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].groupOperation)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:121
		{
			yyVAL.snapshotPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].coalesceOperation)
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/deepql/expr.y:125
		{
			yyVAL.groupOperation = newGroupOperation(yyDollar[3].fieldExpression)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:129
		{
			yyVAL.coalesceOperation = newCoalesceOperation()
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:133
		{
			yyVAL.snapshotExpression = yyDollar[2].snapshotExpression
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:134
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotAnd, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:135
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotChild, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:136
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotDescendant, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:137
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotUnion, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:138
		{
			yyVAL.snapshotExpression = newSnapshotOperation(OpSnapshotSibling, yyDollar[1].snapshotExpression, yyDollar[3].snapshotExpression)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:139
		{
			yyVAL.snapshotExpression = yyDollar[1].snapshotFilter
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/deepql/expr.y:143
		{
			yyVAL.snapshotFilter = newSnapshotFilter(NewStaticBool(true))
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:144
		{
			yyVAL.snapshotFilter = newSnapshotFilter(yyDollar[2].fieldExpression)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:148
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:152
		{
			yyVAL.scalarFilterOperation = OpEqual
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:153
		{
			yyVAL.scalarFilterOperation = OpNotEqual
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:154
		{
			yyVAL.scalarFilterOperation = OpLess
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:155
		{
			yyVAL.scalarFilterOperation = OpLessEqual
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:156
		{
			yyVAL.scalarFilterOperation = OpGreater
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:157
		{
			yyVAL.scalarFilterOperation = OpGreaterEqual
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:164
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:165
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].static)
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:169
		{
			yyVAL.scalarPipelineExpression = yyDollar[2].scalarPipelineExpression
		}
	case 40:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:170
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpAdd, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:171
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpSub, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:172
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMult, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:173
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpDiv, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:174
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMod, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:175
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpPower, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:176
		{
			yyVAL.scalarPipelineExpression = yyDollar[1].wrappedScalarPipeline
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:180
		{
			yyVAL.wrappedScalarPipeline = yyDollar[2].scalarPipeline
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:184
		{
			yyVAL.scalarPipeline = yyDollar[1].snapshotPipeline.addItem(yyDollar[3].aggregate)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:188
		{
			yyVAL.scalarExpression = yyDollar[2].scalarExpression
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:189
		{
			yyVAL.scalarExpression = newScalarOperation(OpAdd, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:190
		{
			yyVAL.scalarExpression = newScalarOperation(OpSub, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:191
		{
			yyVAL.scalarExpression = newScalarOperation(OpMult, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:192
		{
			yyVAL.scalarExpression = newScalarOperation(OpDiv, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:193
		{
			yyVAL.scalarExpression = newScalarOperation(OpMod, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:194
		{
			yyVAL.scalarExpression = newScalarOperation(OpPower, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:195
		{
			yyVAL.scalarExpression = yyDollar[1].aggregate
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:196
		{
			yyVAL.scalarExpression = yyDollar[1].static
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:200
		{
			yyVAL.aggregate = newAggregate(aggregateCount, nil)
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/deepql/expr.y:201
		{
			yyVAL.aggregate = newAggregate(aggregateMax, yyDollar[3].fieldExpression)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/deepql/expr.y:202
		{
			yyVAL.aggregate = newAggregate(aggregateMin, yyDollar[3].fieldExpression)
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/deepql/expr.y:203
		{
			yyVAL.aggregate = newAggregate(aggregateAvg, yyDollar[3].fieldExpression)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/deepql/expr.y:204
		{
			yyVAL.aggregate = newAggregate(aggregateSum, yyDollar[3].fieldExpression)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:211
		{
			yyVAL.fieldExpression = yyDollar[2].fieldExpression
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:212
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAdd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:213
		{
			yyVAL.fieldExpression = newBinaryOperation(OpSub, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:214
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMult, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:215
		{
			yyVAL.fieldExpression = newBinaryOperation(OpDiv, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:216
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMod, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:217
		{
			yyVAL.fieldExpression = newBinaryOperation(OpEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:218
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:219
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLess, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:220
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLessEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:221
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreater, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:222
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreaterEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:223
		{
			yyVAL.fieldExpression = newBinaryOperation(OpRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:224
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:225
		{
			yyVAL.fieldExpression = newBinaryOperation(OpPower, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:226
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAnd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:227
		{
			yyVAL.fieldExpression = newBinaryOperation(OpOr, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 80:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/deepql/expr.y:228
		{
			yyVAL.fieldExpression = newUnaryOperation(OpSub, yyDollar[2].fieldExpression)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/deepql/expr.y:229
		{
			yyVAL.fieldExpression = newUnaryOperation(OpNot, yyDollar[2].fieldExpression)
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:230
		{
			yyVAL.fieldExpression = yyDollar[1].static
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:231
		{
			yyVAL.fieldExpression = yyDollar[1].intrinsicField
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:232
		{
			yyVAL.fieldExpression = yyDollar[1].attributeField
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:239
		{
			yyVAL.static = NewStaticString(yyDollar[1].staticStr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:240
		{
			yyVAL.static = NewStaticInt(yyDollar[1].staticInt)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:241
		{
			yyVAL.static = NewStaticFloat(yyDollar[1].staticFloat)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:242
		{
			yyVAL.static = NewStaticBool(true)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:243
		{
			yyVAL.static = NewStaticBool(false)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:244
		{
			yyVAL.static = NewStaticNil()
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:245
		{
			yyVAL.static = NewStaticDuration(yyDollar[1].staticDuration)
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:249
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicDuration)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/deepql/expr.y:250
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicName)
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:254
		{
			yyVAL.attributeField = NewAttribute(yyDollar[2].staticStr)
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/deepql/expr.y:255
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeResource, false, yyDollar[2].staticStr)
		}
	}
	goto yystack /* stack new state and value */
}
